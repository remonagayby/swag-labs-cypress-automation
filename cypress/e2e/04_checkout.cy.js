import LoginAssertions from "../assertions/login-assertions.cy"

let login = new LoginAssertions

beforeEach(() => {
    login.visitSwagLabs()
})

describe('Standard User Checkout', () => {
    it('should be able to checkout as a standard_user', () => {
        login
            .typeStandardUsername()
            .typeValidPassword()
            .validLoginClick()
            .selectAllItems()
            .clickCartButton()
            .totalCartItems()
            .clickCheckout()
            .assertCheckoutPage1Url()
            .assertCheckout1Header()
            .typeFirstName()
            .typeLastName()
            .typePostalCode()
            .clickContinue()
            .assertCheckoutPage2Url()
            .assertCheckout2Header()
            .assertItemsInCheckout()
            // .assertTotalPrice()
            // .assertTax()
            // .assertTotalAfterTax()
            .clickFinish()
            .assertConfirmationUrl()
    })

    it('should be able to click cancel and return to cart page as a standard_user', () => {
        login
            .typeStandardUsername()
            .typeValidPassword()
            .validLoginClick()
            .selectRandomItem()
            .clickCartButton()
            .totalCartItems()
            .clickCheckout()
            .assertCheckoutPage1Url()
            .assertCheckout1Header()
            .typeFirstName()
            .typeLastName()
            .typePostalCode()
            .clickCancel()
            .assertCartPageUrl()
    })

    it('should not be able to continue to checkout page2 without entring any data as a standard_user', () => {
        login
            .typeStandardUsername()
            .typeValidPassword()
            .validLoginClick()
            .selectRandomItem()
            .clickCartButton()
            .totalCartItems()
            .clickCheckout()
            .assertCheckoutPage1Url()
            .assertCheckout1Header()
            .invalidContinue()
            .assertErrorMessage()
    })

    it('should not be able to continue to checkout page2 with only entring first name as a standard_user', () => {
        login
            .typeStandardUsername()
            .typeValidPassword()
            .validLoginClick()
            .selectRandomItem()
            .clickCartButton()
            .totalCartItems()
            .clickCheckout()
            .assertCheckoutPage1Url()
            .assertCheckout1Header()
            .typeFirstName()
            .invalidContinue()
            .assertErrorMessage()
    })

    it('should not be able to continue to checkout page2 with only entring first and last name as a standard_user', () => {
        login
            .typeStandardUsername()
            .typeValidPassword()
            .validLoginClick()
            .selectRandomItem()
            .clickCartButton()
            .totalCartItems()
            .clickCheckout()
            .assertCheckoutPage1Url()
            .assertCheckout1Header()
            .typeFirstName()
            .typeLastName()
            .invalidContinue()
            .assertErrorMessage()
    })
})

describe('Problem User Checkout', () => {
    it('should be able to checkout as a problem_user', () => {
        login
            .typeProblemUsername()
            .typeValidPassword()
            .validLoginClick()
            .selectAllItems()
            .clickCartButton()
            .totalCartItems()
            .clickCheckout()
            .assertCheckoutPage1Url()
            .assertCheckout1Header()
            .typeFirstName()
            .typeLastName()
            .typePostalCode()
            .clickContinue()
            .assertCheckoutPage2Url()
            .assertCheckout2Header()
            .assertItemsInCheckout()
           // .assertTotalPrice()
           // .assertTax()
           // .assertTotalAfterTax()
            .clickFinish()
            .assertConfirmationUrl()
    })

    it('should be able to click cancel and return to cart page as a problem_user', () => {
        login
            .typeProblemUsername()
            .typeValidPassword()
            .validLoginClick()
            .selectRandomItem()
            .clickCartButton()
            .totalCartItems()
            .clickCheckout()
            .assertCheckoutPage1Url()
            .assertCheckout1Header()
            .typeFirstName()
            .typeLastName()
            .typePostalCode()
            .clickCancel()
            .assertCartPageUrl()
    })

    it('should not be able to continue to checkout page2 without entring any data as a problem_user', () => {
        login
            .typeProblemUsername()
            .typeValidPassword()
            .validLoginClick()
            .selectRandomItem()
            .clickCartButton()
            .totalCartItems()
            .clickCheckout()
            .assertCheckoutPage1Url()
            .assertCheckout1Header()
            .invalidContinue()
            .assertErrorMessage()
    })

    it('should not be able to continue to checkout page2 with only entring first name as a problem_user', () => {
        login
            .typeProblemUsername()
            .typeValidPassword()
            .validLoginClick()
            .selectRandomItem()
            .clickCartButton()
            .totalCartItems()
            .clickCheckout()
            .assertCheckoutPage1Url()
            .assertCheckout1Header()
            .typeFirstName()
            .invalidContinue()
            .assertErrorMessage()
    })

    it('should not be able to continue to checkout page2 with only entring first and last name as a problem_user', () => {
        login
            .typeProblemUsername()
            .typeValidPassword()
            .validLoginClick()
            .selectRandomItem()
            .clickCartButton()
            .totalCartItems()
            .clickCheckout()
            .assertCheckoutPage1Url()
            .assertCheckout1Header()
            .typeFirstName()
            .typeLastName()
            .invalidContinue()
            .assertErrorMessage()
    })
})

describe('Performance Glitch User Checkout', () => {
    it('should be able to checkout as a performance_glitch_user', () => {
        login
            .typePerformanceUsername()
            .typeValidPassword()
            .validLoginClick()
            .selectAllItems()
            .clickCartButton()
            .totalCartItems()
            .clickCheckout()
            .assertCheckoutPage1Url()
            .assertCheckout1Header()
            .typeFirstName()
            .typeLastName()
            .typePostalCode()
            .clickContinue()
            .assertCheckoutPage2Url()
            .assertCheckout2Header()
            .assertItemsInCheckout()
            // .assertTotalPrice()
            // .assertTax()
            // .assertTotalAfterTax()
            .clickFinish()
            .assertConfirmationUrl()
    })

    it('should be able to click cancel and return to cart page as a performance_glitch_user', () => {
        login
            .typePerformanceUsername()
            .typeValidPassword()
            .validLoginClick()
            .selectRandomItem()
            .clickCartButton()
            .totalCartItems()
            .clickCheckout()
            .assertCheckoutPage1Url()
            .assertCheckout1Header()
            .typeFirstName()
            .typeLastName()
            .typePostalCode()
            .clickCancel()
            .assertCartPageUrl()
    })

    it('should not be able to continue to checkout page2 without entring any data as a performance_glitch_user', () => {
        login
            .typePerformanceUsername()
            .typeValidPassword()
            .validLoginClick()
            .selectRandomItem()
            .clickCartButton()
            .totalCartItems()
            .clickCheckout()
            .assertCheckoutPage1Url()
            .assertCheckout1Header()
            .invalidContinue()
            .assertErrorMessage()
    })

    it('should not be able to continue to checkout page2 with only entring first name as a performance_glitch_user', () => {
        login
            .typePerformanceUsername()
            .typeValidPassword()
            .validLoginClick()
            .selectRandomItem()
            .clickCartButton()
            .totalCartItems()
            .clickCheckout()
            .assertCheckoutPage1Url()
            .assertCheckout1Header()
            .typeFirstName()
            .invalidContinue()
            .assertErrorMessage()
    })

    it('should not be able to continue to checkout page2 with only entring first and last name as a performance_glitch_user', () => {
        login
            .typePerformanceUsername()
            .typeValidPassword()
            .validLoginClick()
            .selectRandomItem()
            .clickCartButton()
            .totalCartItems()
            .clickCheckout()
            .assertCheckoutPage1Url()
            .assertCheckout1Header()
            .typeFirstName()
            .typeLastName()
            .invalidContinue()
            .assertErrorMessage()
    })
})


